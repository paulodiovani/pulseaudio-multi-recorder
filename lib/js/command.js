// Generated by CoffeeScript 1.7.1
(function() {
  var Command, PulseAudio, spawn;

  PulseAudio = require('pulseaudio');

  spawn = require('child_process').spawn;


  /*
   * Command class
   * Run pulseaudio commands
   */

  Command = (function() {

    /*
     * How to name the client on server
     */
    Command.prototype.client_name = 'pulseaudio-multi-recorder';


    /*
     * Pulseaudio context
     */

    Command.prototype.pa_context = null;


    /*
     * Default stream for errors (default: process.stderr)
     */

    Command.prototype.err_stream = process.stderr;

    function Command() {
      this.pa_context = new PulseAudio({
        client: this.client_name
      });
    }


    /*
     * Set the error output stream.
     * @param {NodeStream} stream any writable stream who can receive text data
     */

    Command.prototype.set_error_stream = function(stream) {
      this.err_stream = stream;
      return this;
    };


    /*
     * List active sinks
     * @param {Function} callback function to receive the list as argument
     * @return {Command} this
     */

    Command.prototype.list_sinks = function(callback) {
      var me;
      if (callback == null) {
        callback = function() {};
      }
      me = this;
      this.pa_context.on('connection', function() {
        return me.pa_context.sink(function(list) {
          callback(list);
          return me.pa_context.end();
        });
      });
      return this;
    };


    /*
     * List active sources
     * @param {Function} callback function to receive the list as argument
     * @return {Command} this
     */

    Command.prototype.list_sources = function(callback) {
      var me;
      if (callback == null) {
        callback = function() {};
      }
      me = this;
      this.pa_context.on('connection', function() {
        return me.pa_context.source(function(list) {
          callback(list);
          return me.pa_context.end();
        });
      });
      return this;
    };


    /*
     * Record a source using parec and convert to ogg
     * @param {String} source_name source to record
     * @param {String} out_file filename to record to (optional)
     * @return {Command} this
     */

    Command.prototype.start_record = function(source_name, out_file) {
      var oggenc, parec;
      if (out_file == null) {
        out_file = "record-" + (new Date().getTime().toString(16)) + ".ogg";
      }
      parec = spawn('parec', ['-d', source_name, '-n', this.client_name]);
      oggenc = spawn('oggenc', ['-b', '192', '-o', out_file, '--raw', '-']);
      parec.stdout.pipe(oggenc.stdin);
      parec.stderr.pipe(this.err_stream);
      oggenc.stderr.pipe(this.err_stream);
      return this;
    };

    return Command;

  })();

  module.exports = new Command();

}).call(this);
